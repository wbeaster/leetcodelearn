/*
Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]

Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]

 

Note:

    1 <= A.length <= 10000
    -10000 <= A[i] <= 10000
    A is sorted in non-decreasing order.

*/

/**
 * @param {number[]} A
 * @return {number[]}
 */
var sortedSquares = function(A) 
{
    let B = Int32Array.from(A);

    for (let i = 0; i < B.length; i++) 
        B[i] = B[i] * B[i];

    B.sort();

    return B;
};

let data = [-1000,-998,-996,-995,-988,-985,-985,-985,-984,-977,-976,-973,-971,-969,-968,-967,-967,-963,-958,-956,-955,-954,-954,-953,-950,-950,-948,-947,-947,-945,-940,-938,-936,-936,-936,-935,-934,-930,-929,-926,-925,-924,-924,-923,-921,-915,-914,-913,-907,-903,-903,-899,-897,-892,-891,-890,-888,-886,-885,-884,-883,-882,-881,-876,-874,-874,-872,-870,-870,-869,-867,-865,-864,-862,-859,-857,-847,-847,-843,-839,-839,-838,-837,-829,-825,-825,-822,-821,-819,-819,-815,-814,-813,-811,-810,-809,-809,-808,-808,-807,-807,-806,-803,-801,-801,-800,-797,-796,-794,-789,-787,-786,-786,-785,-782,-780,-776,-774,-770,-770,-769,-769,-769,-767,-767,-762,-758,-758,-755,-749,-745,-743,-741,-740,-739,-737,-736,-735,-732,-727,-727,-726,-724,-724,-723,-722,-720,-718,-714,-713,-712,-711,-711,-710,-710,-695,-693,-692,-692,-691,-688,-687,-681,-680,-677,-676,-675,-673,-673,-669,-665,-661,-660,-659,-658,-658,-656,-656,-652,-649,-648,-646,-642,-640,-636,-633,-632,-630,-624,-624,-622,-621,-617,-616,-614,-611,-609,-606,-604,-604,-602,-600,-594,-589,-577,-574,-572,-572,-571,-568,-566,-561,-553,-547,-547,-547,-533,-532,-527,-526,-525,-519,-517,-516,-514,-510,-509,-504,-500,-499,-498,-495,-494,-493,-489,-487,-487,-486,-485,-484,-480,-472,-469,-468,-467,-461,-460,-460,-459,-457,-456,-455,-442,-441,-440,-439,-438,-435,-434,-434,-434,-433,-430,-430,-426,-421,-417,-413,-411,-410,-408,-407,-404,-403,-397,-397,-397,-396,-391,-388,-384,-381,-381,-380,-377,-375,-370,-369,-368,-367,-365,-364,-361,-356,-353,-353,-352,-351,-344,-341,-341,-341,-341,-340,-339,-338,-337,-337,-337,-336,-334,-331,-329,-329,-326,-325,-322,-316,-313,-313,-308,-308,-302,-301,-296,-295,-294,-292,-289,-288,-287,-285,-281,-280,-279,-273,-271,-270,-270,-268,-264,-264,-264,-262,-261,-259,-255,-255,-253,-251,-248,-247,-244,-242,-242,-240,-238,-237,-234,-232,-230,-227,-219,-216,-215,-213,-212,-212,-211,-209,-207,-199,-197,-193,-193,-191,-191,-190,-190,-184,-180,-177,-175,-173,-173,-172,-172,-171,-170,-170,-170,-165,-163,-163,-162,-160,-158,-158,-158,-158,-156,-152,-152,-151,-149,-143,-142,-139,-137,-137,-134,-133,-132,-126,-124,-122,-120,-120,-119,-118,-118,-117,-114,-113,-112,-111,-111,-111,-110,-110,-109,-109,-101,-100,-95,-94,-94,-92,-85,-83,-78,-77,-74,-72,-72,-70,-66,-66,-64,-64,-61,-61,-58,-58,-57,-54,-53,-51,-50,-50,-50,-46,-45,-43,-42,-40,-38,-37,-32,-30,-27,-23,-22,-21,-18,-15,-14,-14,-13,-11,-6,-6,-5,-1,3,4,8,9,13,21,23,26,26,27,31,33,35,38,38,39,39,40,42,43,50,54,57,57,60,60,62,68,70,71,73,76,77,80,91,92,93,93,93,94,95,96,97,97,103,108,115,115,116,116,120,121,121,121,124,126,126,126,126,128,134,134,138,138,139,142,146,147,150,153,157,161,162,168,172,173,174,178,178,180,180,182,185,187,189,192,192,194,194,196,201,202,203,205,211,214,214,215,216,217,218,223,225,233,233,238,241,241,244,244,244,246,249,250,251,253,256,256,258,260,261,261,263,264,267,268,271,272,272,273,274,275,275,279,282,283,286,286,287,287,290,292,293,294,295,296,297,298,299,299,302,302,305,309,309,309,311,312,313,314,315,317,317,318,320,321,323,326,327,335,339,339,341,342,347,349,351,351,356,356,357,357,357,368,375,386,387,387,387,390,394,398,402,403,406,406,407,408,409,410,414,417,417,418,419,421,422,425,426,427,427,429,432,433,435,436,438,445,445,446,447,447,449,450,450,453,459,459,462,464,468,468,469,471,474,474,474,475,475,476,476,477,479,480,481,481,485,488,488,488,493,496,497,498,503,506,506,509,514,515,517,518,523,523,523,524,527,528,529,531,532,539,540,541,543,543,546,550,551,551,553,554,555,555,557,559,560,565,577,577,582,583,584,585,587,587,589,591,592,594,596,597,599,600,605,607,613,613,615,618,620,620,621,621,622,623,624,626,626,627,627,627,630,633,633,635,637,637,638,639,640,642,643,644,644,646,647,648,652,654,655,656,658,659,664,667,668,670,674,675,675,680,682,682,688,690,691,692,698,700,703,706,710,710,712,713,713,721,722,722,728,728,731,732,734,736,738,739,739,740,741,741,743,743,745,746,747,748,750,750,753,753,758,759,762,764,768,770,772,774,774,776,778,780,782,782,784,786,789,789,790,790,791,792,792,793,793,801,802,803,803,805,806,807,808,809,811,815,815,818,818,819,823,825,827,832,837,840,841,842,847,848,848,850,852,853,854,854,859,863,865,866,866,867,868,868,869,874,875,876,880,881,882,882,887,888,894,895,897,900,901,903,903,904,905,907,909,915,916,919,926,931,932,933,934,935,938,941,941,941,944,948,952,957,959,959,962,971,971,973,976,977,977,981,983,984,984,984,985,990,992,993,996,998,999,1000];

console.log(sortedSquares(data));